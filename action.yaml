name: 'Poetry Lock Difference'
description: 'Shows dependencies differences between two poetry.lock files'
branding:
  icon: box
  color: blue
inputs:
  path:
    description: 'Directory where the poetry.lock files are located'
    required: false
    default: '.'
outputs:
  diff_present:
    description: 'Output for GitHub Actions'
    value: ${{ steps.compare_dependencies.outputs.DIFF_PRESENT }}
  diff_content:
    description: 'Output for GitHub Actions'
    value: ${{ steps.compare_dependencies.outputs.DIFF_CONTENT }}


runs:
  using: "composite"
  steps:
    - name: Retrieve poetry.lock
      shell: bash
      run: |
        export BASE_SHA="$(git merge-base "origin/${{ github.head_ref }}" "origin/${{ github.base_ref }}")"
        
        git show "${BASE_SHA}:${{ inputs.path }}/poetry.lock" > "${{ inputs.path }}/poetry.lock.base"
        git show "${BASE_SHA}:${{ inputs.path }}/pyproject.toml" > "${{ inputs.path }}/pyproject.toml.base"

    - name: Backup current poetry.lock
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        cp poetry.lock poetry.lock.head
        cp pyproject.toml pyproject.toml.head        

    - name: Compare dependencies
      shell: bash
      working-directory: ${{ inputs.path }}
      id: compare_dependencies
      run: |
        # Allow non-zero exit code
        set +e
        diff -s -- poetry.lock.base poetry.lock.head > /dev/null
        echo "DIFF_PRESENT=$?" >> $GITHUB_OUTPUT  # 0 if no differences, 1 if differences
        
        mv poetry.lock.base poetry.lock && mv pyproject.toml.base pyproject.toml && poetry show --no-ansi | sed 's|(!)||g' | gawk '{ printf "from,%s,%s\n", $1, $2 }' | sort > data
        mv poetry.lock.head poetry.lock && mv pyproject.toml.head pyproject.toml && poetry show --no-ansi | sed 's|(!)||g' | gawk '{ printf "to,%s,%s\n", $1, $2 }' | sort >> data
        
        cat data
        
        echo "DIFF_CONTENT<<EOL" >> $GITHUB_OUTPUT
        gawk -F, '
        {
          if ($2 in arr == 0) {
            arr[$2][1] = "(null)"
            arr[$2][2] = "(null)"
          }
        
          if ($1 == "from") {
            arr[$2][1] = $3
          } else {
            if (arr[$2][1] != $3) {
              arr[$2][2] = $3
            } else {
              delete arr[$2]
            }
          }
        }
        END {
          printf "| %-24s | %-24s | %-24s |\n", "Package", "Base", "Head"
          printf "| %-24s | %-24s | %-24s |\n", "-----------------------", "----------------------", "-----------------------"
          for (i in arr) {
              printf "| %-24s | %-24s | %-24s |\n", i, arr[i][1], arr[i][2]
          }
        }' data >> $GITHUB_OUTPUT
        echo "EOL" >> $GITHUB_OUTPUT
        set -e

    - name: Cleanup
      shell: bash
      working-directory: ${{ inputs.path }}
      if: always()
      run: |
        rm poetry.lock.base || true
        rm pyproject.toml.base || true
        mv poetry.lock.head poetry.lock || true
        mv pyproject.toml.head pyproject.toml || true
        
